Functions
  = main:DefineMain func:DefineFunction* {return "(module\n".concat(main.concat(func).replace(/,/g,""),"(export \"main\" (func $main))\n)");}

DefineMain
  = "def main" _ "{" _ exp:Expression _ "}" Break _ {return "(func $main (result f64)\n".concat(exp,"\n)\n");}

DefineFunction
  = "def" name:Character para:( _ "(" Parameter ")" _ )* _ "{" exp:Expression "}" Break {return "(func $".concat(name,para," (result f64)\n",exp,"\n)\n");}

Expression
  = _ exp:((If/While/Define/Assign/CallFunction/Math) Break)+ _ {return exp.join("\n").replace(/,/g,"");}

If
  = "if (" bool:Bool ") {" exp:Expression "}" _ "else {" elseexp:Expression "}" {
  return "(if ".concat(bool,"\n(then ",exp,")\n")
  .concat("(else ",elseexp,"))");}

While
  = "do {" exp:Expression "}" _ "while" _ "("bool:Bool")" {
  return "(loop\n".concat(exp,"\n(br_if 0 ",bool,"))")
  ;}

Bool 
  = head:Math _ op:("=="/"!="/"<="/"<"/">="/">") _ tail:Math{
    if (op === "==") { return "(f64.eq ".concat(head,tail,")");}
    if (op === "!=") { return "(f64.ne ".concat(head,tail,")");}
    if (op === "<") { return "(f64.lt ".concat(head,tail,")");}
    if (op === "<=") { return "(f64.le ".concat(head,tail,")");}
    if (op === ">") { return "(f64.gt ".concat(head,tail,")");}
    if (op === ">=") { return "(f64.ge ".concat(head,tail,")");}
    }
  

CallFunction
  = "call" char:Character para:( _ "(" CallParameter ")" _ )* {return "(call $".concat(char,para,")");}

CallParameter
  = para:Math {return para.replace("(","").replace(")","");;}

Define
  = "var" char:Character{return "(local $".concat(char).concat(" f64)"); }

Assign
  = va:Character _ "=" _ exp:Math {return "(set_local $".concat(va.concat(exp).concat(")"));}

Math
  = head:Term tail:(_ ("+" / "-") _ Term)*{
      return tail.reduce(function(result, element) {
        if (element[1] === "+") { return "(f64.add ".concat(result,element[3],")"); }
        if (element[1] === "-") { return "(f64.sub ".concat(result,element[3],")"); }
      }, head);
    }

Term
  = head:Factor tail:(_ ("*" / "/") _ Factor)* {
      return tail.reduce(function(result, element) {
        if (element[1] === "*") { return "(f64.mul ".concat(result,element[3],")"); }
        if (element[1] === "/") { return "(f64.div ".concat(result,element[3],")"); }
      }, head);
    }
    
Parameter
  = char:Character {return "param $".concat(char, " f64");}

Factor
  = "(" _ expr:Math _ ")" { return expr; }
  / CallFunction / Integer / GetVariable

Integer "integer"
  = _ [0-9]+ { return "(f64.const ".concat(text(),")"); }
  
GetVariable
  = char:Character { return "(get_local $".concat(char,")");}
  
Character "character"
  = _[a-zA-Z]+ { return text().replace(" ","")}

Break "break"
  = [;]_ {return "";}

_ "whitespace"
  = [ \t\r\n]*

              
