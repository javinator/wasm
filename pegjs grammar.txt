Module
  = main:DefineMain func:DefineFunction* 
  {return new Module(main,func);} 
  
DefineMain
  = "def main" _ "{" _ exp:Expression _ "}" Break _ 
  {return new DefineMain(exp);}

DefineFunction
  = "def" name:Character para:( _ "(" Parameter ")" _ )* _ "{" exp:Expression "}" Break 
  {return new DefineFunction(name,para,exp);}

Expression
  = _ exp:((If/While/CreateArray/Define/Assign/Math) Break)+ _ 
  {return new Expression(exp);}

If
  = "if (" bool:Bool ") {" exp:Expression "}" _ "else {" elseexp:Expression "}" 
  {return new If(bool,exp,elseexp);}

While
  = "do {" exp:Expression "}" _ "while" _ "("bool:Bool")" 
  {return new While(bool,exp);}

Bool 
  = head:Math _ op:("=="/"!="/"<="/"<"/">="/">") _ tail:Math
  {return new Bool(head,op,tail);}

CreateArray
  = "array" _ char:Character _ "[" _ ele:(Integer/GetVariable)+ _ "]" {return new CreateArray(char,ele);}
  
GetArrayElement
  = "get" _ char:Character _ "[" _ ele:(Integer/GetVariable) _ "]" {return new GetArrayElement(char,ele);}
  
CallFunction
  = "call" char:Character para:( _ "(" CallParameter ")" _ )* 
  {return new CallFunction(char,para);}

CallParameter
  = para:Math {return new CallParameter(para);}

Define
  = "var" char:Character {return new Define(char);}

Assign
  = char:Character _ "=" _ exp:Math {return new Assign(char,exp);}

Math
  = head:Term tail:(_ ("+" / "-") _ Term)*{
      return tail.reduce(function(result, element) {
        return new Math(result,element[1],element[3]);
	}, head);}

Term
  = head:Factor tail:(_ ("*" / "/") _ Factor)* {
      return tail.reduce(function(result, element) {
        return new Term(result,element[1],element[3]);
      }, head);}
    
Parameter
  = char:Character {return new Parameter(char);}

Factor
  = "(" _ expr:Math _ ")" {return new Factor(expr);}
  / CallFunction / Integer / GetArrayElement / GetVariable

Integer "integer"
  = _ [0-9]+ {return new Integer(text());}
  
GetVariable
  = char:Character {return new GetVariable(char);}
  
Character "character"
  = _[a-zA-Z]+ {return text().replace(" ","");}

Break "break"
  = [;]_ {return;}

_ "whitespace"
  = [ \t\r\n]*
