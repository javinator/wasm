Functions
  = main:DefineMain func:DefineFunction* {return main.concat(func).replace(/,/g,"");}

DefineMain
  = "def main" "{" exp:Expression "}" Break {return "(func $main (result f64)\n".concat(exp,"\n)\n");}

DefineFunction
  = "def" name:Character "{" exp:Expression "}" Break {return "(func $".concat(name," (result f64)\n",exp,"\n)\n");}

Expression
  = exp:((Define/Assign/CallFunction/MathExpression) Break)+ {return exp.join("\n").replace(/,/g,"");}
  
CallFunction
  = "call" char:Character {return "(call $".concat(char,")");}

Define
  = "var" char:Character{return "(local $".concat(char).concat(" f64)"); }

Assign
  = va:SetVariable equ:Equal _ math:MathExpression {return va.concat(math).concat(")");}

SetVariable
  = char:Character { return "(set_local $".concat(char," ");}

MathExpression
  = head:Term tail:(_ ("+" / "-") _ Term)*{
      return tail.reduce(function(result, element) {
        if (element[1] === "+") { return "(f64.add ".concat(result,element[3],")"); }
        if (element[1] === "-") { return "(f64.sub ".concat(result,element[3],")"); }
      }, head);
    }

Term
  = head:Factor tail:(_ ("*" / "/") _ Factor)* {
      return tail.reduce(function(result, element) {
        if (element[1] === "*") { return "(f64.mul ".concat(result,element[3],")"); }
        if (element[1] === "/") { return "(f64.div ".concat(result,element[3],")"); }
      }, head);
    }

Factor
  = "(" _ expr:MathExpression _ ")" { return expr; }
  / Integer / GetVariable

Integer "integer"
  = _ [0-9]+ { return "(f64.const ".concat(text(),")"); }
  
GetVariable
  = char:Character { return "(get_local $".concat(char,")");}
  
Equal "equal"
  = _ [=] {return "=";}
  
Character "character"
  = _[a-zA-Z]+ { return text().replace(" ","")}

Break "break"
  = [;]_ {return "";}

_ "whitespace"
  = [ \t\r\n]*

              