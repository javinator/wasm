Expression
  = (MathExpression / Other) * 

Other
  = va:Variable math:MathExpression {return va.concat(" (").concat(math).concat(")");}

Variable
  = char:Character sign:Sign  {
  		if (sign === "=") { return "set_local $".concat(char);}
        else { return "add/sub/mult/div";}
    }

MathExpression
  = head:Term tail:(_ ("+" / "-") _ Term)* {
      return tail.reduce(function(result, element) {
        if (element[1] === "+") { return "f64.add (".concat(result,")(",element[3],")"); }
        if (element[1] === "-") { return "f64.sub (".concat(result,")(",element[3],")"); }
      }, head);
    }

Term
  = head:Factor tail:(_ ("*" / "/") _ Factor)* {
      return tail.reduce(function(result, element) {
        if (element[1] === "*") { return "f64.mul (".concat(result,")(",element[3],")"); }
        if (element[1] === "/") { return "f64.div (".concat(result,")(",element[3],")"); }
      }, head);
    }

Factor
  = "(" _ expr:MathExpression _ ")" { return expr; }
  / Integer

Integer "integer"
  = _ [0-9]+ { return "f64.const ".concat(text()); }
  
Sign "sign"
  = _ [=+*/-] {return text();}
  
Character "character"
  = _[^0-9=+*/-]+ { return text().replace(" ","")}

_ "whitespace"
  = [ \t\n\r]*            
