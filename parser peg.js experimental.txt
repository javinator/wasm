Expression
  = ((Define/Assign/MathExpression) Break)*

Define
  = "var" char:Character{return "(local $".concat(char).concat(")"); }

Assign
  = va:SetVariable equ:Equal math:MathExpression {return va.concat(" (").concat(math).concat(")");}

SetVariable
  = char:Character { return "set_local $".concat(char);}

MathExpression
  = head:Term tail:(_ ("+" / "-") _ Term)*{
      return tail.reduce(function(result, element) {
        if (element[1] === "+") { return "f64.add (".concat(result,")(",element[3],")"); }
        if (element[1] === "-") { return "f64.sub (".concat(result,")(",element[3],")"); }
      }, head);
    }

Term
  = head:Factor tail:(_ ("*" / "/") _ Factor)* {
      return tail.reduce(function(result, element) {
        if (element[1] === "*") { return "f64.mul (".concat(result,")(",element[3],")"); }
        if (element[1] === "/") { return "f64.div (".concat(result,")(",element[3],")"); }
      }, head);
    }

Factor
  = "(" _ expr:MathExpression _ ")" { return expr; }
  / Integer / GetVariable

Integer "integer"
  = _ [0-9]+ { return "f64.const ".concat(text()); }
  
GetVariable
  = char:Character { return "get_local $".concat(char);}
  
Equal "equal"
  = _ [=] {return "=";}
  
Character "character"
  = _[a-zA-Z]+ { return text().replace(" ","")}

Break "break"
  = [;]_

_ "whitespace"
  = [ \t\r\n]*
